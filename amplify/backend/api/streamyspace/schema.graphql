type User
@model
@auth(rules: [{ allow: owner, operations: [create, update, delete, read] }])
{
  id: ID!
  email: String!
  status: UserStatus!
  videos: [Video] @hasMany(fields: ["id"])
  chats: [ChatUser] @hasMany(fields: ["id"])
}

type ChatUser 
@model 
@auth(rules: [{ allow: owner, operations: [create, update, delete, read] }])
{
  id: ID!
  userID: ID!
  chatID: ID!
  user: User @belongsTo(fields: ["userID"])
  chat: Chat @belongsTo(fields: ["chatID"])
}

type Chat 
@model 
@auth(rules: [{ allow: owner, operations: [create, update, delete, read] }])
{
  id: ID!
  users: [ChatUser] @hasMany(fields: ["id"])
  messages: [Message] @hasMany(fields: ["id"])
}

type Message 
@model 
@auth(rules: [{ allow: owner, operations: [create, update, delete, read] }])
{
  id: ID!
  content: String!
  timestamp: AWSDateTime!
  chatID: ID!
  ownerID: ID!
}

type Video 
@model 
@auth(rules: [{ allow: owner, operations: [create, update, delete, read] }])
{
  id: ID!
  url: String!
  ownerID: ID!
  comments: [VideoComment] @hasMany(fields: ["id"])
}

type VideoComment 
@model 
@auth(rules: [{ allow: owner, operations: [create, update, delete, read] }])
{
  id: ID!
  content: String!
  timestamp: AWSDateTime
  videoID: ID!
  ownerID: ID!
}

enum UserStatus {
  REGISTERED
  REGISTEREDNOAUTH
  UNREGISTERED
}
